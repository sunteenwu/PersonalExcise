//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace CToolKit
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace CToolKit.CToolKit_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[29];
            _typeNameTable[0] = "MyToolkit.Controls.DataGrid";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[3] = "Int32";
            _typeNameTable[4] = "Windows.UI.Xaml.Style";
            _typeNameTable[5] = "MyToolkit.Controls.DataGridColumnCollection";
            _typeNameTable[6] = "System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.DataGridColumnBase>";
            _typeNameTable[7] = "System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.DataGridColumnBase>";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "MyToolkit.Controls.DataGridColumnBase";
            _typeNameTable[10] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[11] = "Boolean";
            _typeNameTable[12] = "Windows.UI.Xaml.GridLength";
            _typeNameTable[13] = "Windows.UI.Xaml.PropertyPath";
            _typeNameTable[14] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[15] = "MyToolkit.Collections.IObservableCollectionView";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.SelectionMode";
            _typeNameTable[17] = "Windows.UI.Xaml.DataTemplate";
            _typeNameTable[18] = "MyToolkit.Controls.DataGridTextColumn";
            _typeNameTable[19] = "MyToolkit.Controls.DataGridBoundColumn";
            _typeNameTable[20] = "Windows.UI.Xaml.Data.Binding";
            _typeNameTable[21] = "Double";
            _typeNameTable[22] = "Windows.UI.Text.FontStyle";
            _typeNameTable[23] = "System.Enum";
            _typeNameTable[24] = "System.ValueType";
            _typeNameTable[25] = "MyToolkit.Controls.DataGridTemplatedColumn";
            _typeNameTable[26] = "CToolKit.MainPage";
            _typeNameTable[27] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[28] = "Windows.UI.Xaml.Controls.UserControl";

            _typeTable = new global::System.Type[29];
            _typeTable[0] = typeof(global::MyToolkit.Controls.DataGrid);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[3] = typeof(global::System.Int32);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Style);
            _typeTable[5] = typeof(global::MyToolkit.Controls.DataGridColumnCollection);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumnBase>);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumnBase>);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::MyToolkit.Controls.DataGridColumnBase);
            _typeTable[10] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[11] = typeof(global::System.Boolean);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.GridLength);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.PropertyPath);
            _typeTable[14] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[15] = typeof(global::MyToolkit.Collections.IObservableCollectionView);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.SelectionMode);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.DataTemplate);
            _typeTable[18] = typeof(global::MyToolkit.Controls.DataGridTextColumn);
            _typeTable[19] = typeof(global::MyToolkit.Controls.DataGridBoundColumn);
            _typeTable[20] = typeof(global::Windows.UI.Xaml.Data.Binding);
            _typeTable[21] = typeof(global::System.Double);
            _typeTable[22] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[23] = typeof(global::System.Enum);
            _typeTable[24] = typeof(global::System.ValueType);
            _typeTable[25] = typeof(global::MyToolkit.Controls.DataGridTemplatedColumn);
            _typeTable[26] = typeof(global::CToolKit.MainPage);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_DataGrid() { return new global::MyToolkit.Controls.DataGrid(); }
        private object Activate_5_DataGridColumnCollection() { return new global::MyToolkit.Controls.DataGridColumnCollection(); }
        private object Activate_6_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::MyToolkit.Controls.DataGridColumnBase>(); }
        private object Activate_7_Collection() { return new global::System.Collections.ObjectModel.Collection<global::MyToolkit.Controls.DataGridColumnBase>(); }
        private object Activate_18_DataGridTextColumn() { return new global::MyToolkit.Controls.DataGridTextColumn(); }
        private object Activate_25_DataGridTemplatedColumn() { return new global::MyToolkit.Controls.DataGridTemplatedColumn(); }
        private object Activate_26_MainPage() { return new global::CToolKit.MainPage(); }
        private void VectorAdd_5_DataGridColumnCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumnBase>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumnBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumnBase>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumnBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_7_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::MyToolkit.Controls.DataGridColumnBase>)instance;
            var newItem = (global::MyToolkit.Controls.DataGridColumnBase)item;
            collection.Add(newItem);
        }
        private void VectorAdd_14_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  MyToolkit.Controls.DataGrid
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_DataGrid;
                userType.AddMemberName("HeaderBackground");
                userType.AddMemberName("DefaultOrderIndex");
                userType.AddMemberName("RowBackgroundEvenBrush");
                userType.AddMemberName("RowBackgroundOddBrush");
                userType.AddMemberName("RowStyle");
                userType.AddMemberName("Columns");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("Items");
                userType.AddMemberName("SelectedColumn");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemDetailsTemplate");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("CellTemplate");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Int32
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Windows.UI.Xaml.Style
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  MyToolkit.Controls.DataGridColumnCollection
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.DataGridColumnBase>"));
                userType.CollectionAdd = VectorAdd_5_DataGridColumnCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.ObservableCollection`1<MyToolkit.Controls.DataGridColumnBase>
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.DataGridColumnBase>"));
                userType.Activator = Activate_6_ObservableCollection;
                userType.CollectionAdd = VectorAdd_6_ObservableCollection;
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.Collection`1<MyToolkit.Controls.DataGridColumnBase>
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Collection;
                userType.CollectionAdd = VectorAdd_7_Collection;
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  MyToolkit.Controls.DataGridColumnBase
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.AddMemberName("CanSort");
                userType.AddMemberName("IsSelected");
                userType.AddMemberName("IsAscending");
                userType.AddMemberName("IsAscendingDefault");
                userType.AddMemberName("Header");
                userType.AddMemberName("Width");
                userType.AddMemberName("OrderPropertyPath");
                xamlType = userType;
                break;

            case 10:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Boolean
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Xaml.GridLength
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.PropertyPath
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_14_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  MyToolkit.Collections.IObservableCollectionView
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.SelectionMode
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Windows.UI.Xaml.DataTemplate
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  MyToolkit.Controls.DataGridTextColumn
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.DataGridBoundColumn"));
                userType.Activator = Activate_18_DataGridTextColumn;
                userType.AddMemberName("Foreground");
                userType.AddMemberName("Style");
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontStyle");
                xamlType = userType;
                break;

            case 19:   //  MyToolkit.Controls.DataGridBoundColumn
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase"));
                userType.AddMemberName("Binding");
                userType.AddMemberName("OrderPropertyPath");
                xamlType = userType;
                break;

            case 20:   //  Windows.UI.Xaml.Data.Binding
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Double
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Windows.UI.Text.FontStyle
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 23:   //  System.Enum
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 24:   //  System.ValueType
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 25:   //  MyToolkit.Controls.DataGridTemplatedColumn
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase"));
                userType.Activator = Activate_25_DataGridTemplatedColumn;
                userType.AddMemberName("CellTemplate");
                userType.AddMemberName("Order");
                userType.AddMemberName("OrderPropertyPath");
                userType.AddMemberName("OnlyVisibleOnSelection");
                xamlType = userType;
                break;

            case 26:   //  CToolKit.MainPage
                userType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::MyToolkit.MyToolkit_Extended_Uwp_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_DataGrid_HeaderBackground(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.HeaderBackground;
        }
        private void set_0_DataGrid_HeaderBackground(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.HeaderBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_1_DataGrid_DefaultOrderIndex(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.DefaultOrderIndex;
        }
        private void set_1_DataGrid_DefaultOrderIndex(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.DefaultOrderIndex = (global::System.Int32)Value;
        }
        private object get_2_DataGrid_RowBackgroundEvenBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.RowBackgroundEvenBrush;
        }
        private void set_2_DataGrid_RowBackgroundEvenBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.RowBackgroundEvenBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_3_DataGrid_RowBackgroundOddBrush(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.RowBackgroundOddBrush;
        }
        private void set_3_DataGrid_RowBackgroundOddBrush(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.RowBackgroundOddBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_4_DataGrid_RowStyle(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.RowStyle;
        }
        private void set_4_DataGrid_RowStyle(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.RowStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_5_DataGrid_Columns(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.Columns;
        }
        private void set_5_DataGrid_Columns(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.Columns = (global::MyToolkit.Controls.DataGridColumnCollection)Value;
        }
        private object get_6_DataGridColumnBase_CanSort(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.CanSort;
        }
        private void set_6_DataGridColumnBase_CanSort(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.CanSort = (global::System.Boolean)Value;
        }
        private object get_7_DataGridColumnBase_IsSelected(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.IsSelected;
        }
        private object get_8_DataGridColumnBase_IsAscending(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.IsAscending;
        }
        private object get_9_DataGridColumnBase_IsAscendingDefault(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.IsAscendingDefault;
        }
        private void set_9_DataGridColumnBase_IsAscendingDefault(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.IsAscendingDefault = (global::System.Boolean)Value;
        }
        private object get_10_DataGridColumnBase_Header(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.Header;
        }
        private void set_10_DataGridColumnBase_Header(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_11_DataGridColumnBase_Width(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.Width;
        }
        private void set_11_DataGridColumnBase_Width(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            that.Width = (global::Windows.UI.Xaml.GridLength)Value;
        }
        private object get_12_DataGridColumnBase_OrderPropertyPath(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridColumnBase)instance;
            return that.OrderPropertyPath;
        }
        private object get_13_DataGrid_SelectedItems(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedItems;
        }
        private object get_14_DataGrid_Items(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.Items;
        }
        private object get_15_DataGrid_SelectedColumn(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedColumn;
        }
        private object get_16_DataGrid_SelectionMode(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectionMode;
        }
        private void set_16_DataGrid_SelectionMode(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.SelectionMode = (global::Windows.UI.Xaml.Controls.SelectionMode)Value;
        }
        private object get_17_DataGrid_SelectedItem(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.SelectedItem;
        }
        private void set_17_DataGrid_SelectedItem(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_18_DataGrid_ItemsSource(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ItemsSource;
        }
        private void set_18_DataGrid_ItemsSource(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_19_DataGrid_ItemDetailsTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.ItemDetailsTemplate;
        }
        private void set_19_DataGrid_ItemDetailsTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.ItemDetailsTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_20_DataGrid_HeaderTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.HeaderTemplate;
        }
        private void set_20_DataGrid_HeaderTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_21_DataGrid_CellTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            return that.CellTemplate;
        }
        private void set_21_DataGrid_CellTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGrid)instance;
            that.CellTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_22_DataGridBoundColumn_Binding(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridBoundColumn)instance;
            return that.Binding;
        }
        private void set_22_DataGridBoundColumn_Binding(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridBoundColumn)instance;
            that.Binding = (global::Windows.UI.Xaml.Data.Binding)Value;
        }
        private object get_23_DataGridTextColumn_Foreground(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.Foreground;
        }
        private void set_23_DataGridTextColumn_Foreground(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_24_DataGridTextColumn_Style(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.Style;
        }
        private void set_24_DataGridTextColumn_Style(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.Style = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_25_DataGridTextColumn_FontSize(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.FontSize;
        }
        private void set_25_DataGridTextColumn_FontSize(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_26_DataGridTextColumn_FontStyle(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            return that.FontStyle;
        }
        private void set_26_DataGridTextColumn_FontStyle(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTextColumn)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_27_DataGridBoundColumn_OrderPropertyPath(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridBoundColumn)instance;
            return that.OrderPropertyPath;
        }
        private object get_28_DataGridTemplatedColumn_CellTemplate(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            return that.CellTemplate;
        }
        private void set_28_DataGridTemplatedColumn_CellTemplate(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            that.CellTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_29_DataGridTemplatedColumn_Order(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            return that.Order;
        }
        private void set_29_DataGridTemplatedColumn_Order(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            that.Order = (global::Windows.UI.Xaml.Data.Binding)Value;
        }
        private object get_30_DataGridTemplatedColumn_OrderPropertyPath(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            return that.OrderPropertyPath;
        }
        private object get_31_DataGridTemplatedColumn_OnlyVisibleOnSelection(object instance)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            return that.OnlyVisibleOnSelection;
        }
        private void set_31_DataGridTemplatedColumn_OnlyVisibleOnSelection(object instance, object Value)
        {
            var that = (global::MyToolkit.Controls.DataGridTemplatedColumn)instance;
            that.OnlyVisibleOnSelection = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::CToolKit.CToolKit_XamlTypeInfo.XamlMember xamlMember = null;
            global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "MyToolkit.Controls.DataGrid.HeaderBackground":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "HeaderBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_DataGrid_HeaderBackground;
                xamlMember.Setter = set_0_DataGrid_HeaderBackground;
                break;
            case "MyToolkit.Controls.DataGrid.DefaultOrderIndex":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "DefaultOrderIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_DataGrid_DefaultOrderIndex;
                xamlMember.Setter = set_1_DataGrid_DefaultOrderIndex;
                break;
            case "MyToolkit.Controls.DataGrid.RowBackgroundEvenBrush":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "RowBackgroundEvenBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_DataGrid_RowBackgroundEvenBrush;
                xamlMember.Setter = set_2_DataGrid_RowBackgroundEvenBrush;
                break;
            case "MyToolkit.Controls.DataGrid.RowBackgroundOddBrush":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "RowBackgroundOddBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DataGrid_RowBackgroundOddBrush;
                xamlMember.Setter = set_3_DataGrid_RowBackgroundOddBrush;
                break;
            case "MyToolkit.Controls.DataGrid.RowStyle":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "RowStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DataGrid_RowStyle;
                xamlMember.Setter = set_4_DataGrid_RowStyle;
                break;
            case "MyToolkit.Controls.DataGrid.Columns":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Columns", "MyToolkit.Controls.DataGridColumnCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_DataGrid_Columns;
                xamlMember.Setter = set_5_DataGrid_Columns;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.CanSort":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "CanSort", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_DataGridColumnBase_CanSort;
                xamlMember.Setter = set_6_DataGridColumnBase_CanSort;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.IsSelected":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_DataGridColumnBase_IsSelected;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumnBase.IsAscending":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "IsAscending", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_DataGridColumnBase_IsAscending;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridColumnBase.IsAscendingDefault":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "IsAscendingDefault", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DataGridColumnBase_IsAscendingDefault;
                xamlMember.Setter = set_9_DataGridColumnBase_IsAscendingDefault;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.Header":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DataGridColumnBase_Header;
                xamlMember.Setter = set_10_DataGridColumnBase_Header;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.Width":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Width", "Windows.UI.Xaml.GridLength");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DataGridColumnBase_Width;
                xamlMember.Setter = set_11_DataGridColumnBase_Width;
                break;
            case "MyToolkit.Controls.DataGridColumnBase.OrderPropertyPath":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridColumnBase");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "OrderPropertyPath", "Windows.UI.Xaml.PropertyPath");
                xamlMember.Getter = get_12_DataGridColumnBase_OrderPropertyPath;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.SelectedItems":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.Getter = get_13_DataGrid_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.Items":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Items", "MyToolkit.Collections.IObservableCollectionView");
                xamlMember.Getter = get_14_DataGrid_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.SelectedColumn":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "SelectedColumn", "MyToolkit.Controls.DataGridColumnBase");
                xamlMember.Getter = get_15_DataGrid_SelectedColumn;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGrid.SelectionMode":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "SelectionMode", "Windows.UI.Xaml.Controls.SelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_DataGrid_SelectionMode;
                xamlMember.Setter = set_16_DataGrid_SelectionMode;
                break;
            case "MyToolkit.Controls.DataGrid.SelectedItem":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DataGrid_SelectedItem;
                xamlMember.Setter = set_17_DataGrid_SelectedItem;
                break;
            case "MyToolkit.Controls.DataGrid.ItemsSource":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_DataGrid_ItemsSource;
                xamlMember.Setter = set_18_DataGrid_ItemsSource;
                break;
            case "MyToolkit.Controls.DataGrid.ItemDetailsTemplate":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "ItemDetailsTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_DataGrid_ItemDetailsTemplate;
                xamlMember.Setter = set_19_DataGrid_ItemDetailsTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.HeaderTemplate":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_DataGrid_HeaderTemplate;
                xamlMember.Setter = set_20_DataGrid_HeaderTemplate;
                break;
            case "MyToolkit.Controls.DataGrid.CellTemplate":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGrid");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "CellTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_DataGrid_CellTemplate;
                xamlMember.Setter = set_21_DataGrid_CellTemplate;
                break;
            case "MyToolkit.Controls.DataGridBoundColumn.Binding":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridBoundColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Binding", "Windows.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_22_DataGridBoundColumn_Binding;
                xamlMember.Setter = set_22_DataGridBoundColumn_Binding;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.Foreground":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_DataGridTextColumn_Foreground;
                xamlMember.Setter = set_23_DataGridTextColumn_Foreground;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.Style":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Style", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_DataGridTextColumn_Style;
                xamlMember.Setter = set_24_DataGridTextColumn_Style;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.FontSize":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_DataGridTextColumn_FontSize;
                xamlMember.Setter = set_25_DataGridTextColumn_FontSize;
                break;
            case "MyToolkit.Controls.DataGridTextColumn.FontStyle":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTextColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_DataGridTextColumn_FontStyle;
                xamlMember.Setter = set_26_DataGridTextColumn_FontStyle;
                break;
            case "MyToolkit.Controls.DataGridBoundColumn.OrderPropertyPath":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridBoundColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "OrderPropertyPath", "Windows.UI.Xaml.PropertyPath");
                xamlMember.Getter = get_27_DataGridBoundColumn_OrderPropertyPath;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridTemplatedColumn.CellTemplate":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTemplatedColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "CellTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_28_DataGridTemplatedColumn_CellTemplate;
                xamlMember.Setter = set_28_DataGridTemplatedColumn_CellTemplate;
                break;
            case "MyToolkit.Controls.DataGridTemplatedColumn.Order":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTemplatedColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "Order", "Windows.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_29_DataGridTemplatedColumn_Order;
                xamlMember.Setter = set_29_DataGridTemplatedColumn_Order;
                break;
            case "MyToolkit.Controls.DataGridTemplatedColumn.OrderPropertyPath":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTemplatedColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "OrderPropertyPath", "Windows.UI.Xaml.PropertyPath");
                xamlMember.Getter = get_30_DataGridTemplatedColumn_OrderPropertyPath;
                xamlMember.SetIsReadOnly();
                break;
            case "MyToolkit.Controls.DataGridTemplatedColumn.OnlyVisibleOnSelection":
                userType = (global::CToolKit.CToolKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("MyToolkit.Controls.DataGridTemplatedColumn");
                xamlMember = new global::CToolKit.CToolKit_XamlTypeInfo.XamlMember(this, "OnlyVisibleOnSelection", "Boolean");
                xamlMember.Getter = get_31_DataGridTemplatedColumn_OnlyVisibleOnSelection;
                xamlMember.Setter = set_31_DataGridTemplatedColumn_OnlyVisibleOnSelection;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::CToolKit.CToolKit_XamlTypeInfo.XamlSystemBaseType
    {
        global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::CToolKit.CToolKit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

